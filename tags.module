<?php


/**
 * Implementation of hook_menu().
 */
function tags_menu() {
  $items = array();

  $items['tags/manage'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tags_manage_form'),
    'access callback' => 'user_access',
    'access arguments' => array('manage own tags'),
    'file' => 'tags.pages.inc',
    'type' => MENU_CALLBACK
  );

  $items['tags/manage/vocabulary/%/ajax'] = array(
    'page callback' => 'tags_manage_vocabulary_ajax',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('manage own tags'),
    'file' => 'tags.pages.inc',
    'type' => MENU_CALLBACK
  );

  $items['tags/content'] = array(
    'page callback' => 'tags_content_page',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'file' => 'tags.pages.inc',
    'type' => MENU_CALLBACK
  );

  $items['tags/content/ajax/tree'] = array(
    'page callback' => 'tags_content_tree_ajax',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'file' => 'tags.pages.inc',
    'type' => MENU_CALLBACK
  );

  $items['tags/content/ajax/node'] = array(
    'page callback' => 'tags_content_node_ajax',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'file' => 'tags.pages.inc',
    'type' => MENU_CALLBACK
  );

  $items['tags/content/ajax/node/%node'] = array(
    'page callback' => 'tags_content_node_content_ajax',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'file' => 'tags.pages.inc',
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function tags_perm() {
  $perms = array(
    'manage own tags',
  );
  return $perms;
}

/**
 * Implementation of hook_theme()
 */
function tags_theme() {
  return array(
    'tags_manage_form' => array(
      'arguments' => array('form' => array()),
    ),

    'tags_content_page' => array(
      'template' => 'template/content-page',
      'arguments' => array('data' => array()),
    ),
  );
}

/**
 * Implementation of hook_taxonomy
 */
function tags_taxonomy($op, $type, $array = NULL) {
  switch($op) {
    case 'delete':
      if($type == 'term') {
        tags_del_term($array['tid']);
      }
      break;

    case 'insert':
      break;

    case 'update':
      break;
  }
}

/**
 *
 */
function tags_del_term($tid) {
  $tids = array($tid);
  while ($tids) {
    $children_tids = $orphans = array();
    foreach ($tids as $tid) {
      // See if any of the term's children are about to be become orphans:
      if ($children = tags_get_children($tid)) {
        foreach ($children as $child) {
          // If the term has multiple parents, we don't delete it.
          $parents = tags_get_parents($child->tid);
          if (count($parents) == 1) {
            $orphans[] = $child->tid;
          }
        }
      }

      db_query('DELETE FROM {tag_hierarchy} WHERE tid = %d', $tid);
    }

    $tids = $orphans;
  }

  cache_clear_all();

  return SAVED_DELETED;
}

/**
 *
 */
function tags_get_children($tid, $vid = 0, $key = 'tid') {
  if ($vid) {
    $result = db_query(db_rewrite_sql('SELECT t.* FROM {term_data} t INNER JOIN {tag_hierarchy} h ON h.tid = t.tid WHERE t.vid = %d AND h.parent = %d ORDER BY weight, name', 't', 'tid'), $vid, $tid);
  }
  else {
    $result = db_query(db_rewrite_sql('SELECT t.* FROM {term_data} t INNER JOIN {tag_hierarchy} h ON h.tid = t.tid WHERE parent = %d ORDER BY weight, name', 't', 'tid'), $tid);
  }
  $children = array();
  while ($term = db_fetch_object($result)) {
    $children[$term->$key] = $term;
  }
  return $children;
}

/**
 * Find all parents of a given term ID.
 */
function tags_get_parents($tid, $key = 'tid') {
  if ($tid) {
    $result = db_query(db_rewrite_sql('SELECT t.tid, t.* FROM {term_data} t INNER JOIN {tag_hierarchy} h ON h.parent = t.tid WHERE h.tid = %d ORDER BY weight, name', 't', 'tid'), $tid);
    $parents = array();
    while ($parent = db_fetch_object($result)) {
      $parents[$parent->$key] = $parent;
    }
    return $parents;
  }
  else {
    return array();
  }
}

/**
 *
 */
function tags_get_all_children_tid($tid, $tid_list=array()) {
  $tid_list[] = $tid;
  $children = tags_get_children($tid);
  if (count($children) > 0) {
    foreach ($children as $term) {
      $tid_list = tags_get_all_children_tid($term->tid, $tid_list);
    }
  }
  return $tid_list;
}